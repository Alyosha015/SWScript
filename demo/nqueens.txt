;Note: although the code will run in the lua vm it will hit the 1,000 ms execution time limit, this was made to test the c# vm.

local n = 8
local solutions = Queens(n, 0, {}, {}, {})

;for i=1, i<=#solutions {
;    local solution = solutions[i]
;    PrintTable(solution)
;}

println("Found " $ #solutions $ " solutions for n=" $ n $ ".")

func Queens(n, i, a, b, c) {
    local solutions = {}

    if (i < n) {
        for j=0, j<n {
            if !TableContains(a, j) && !TableContains(b, i+j) && !TableContains(c, i-j) {
                local newA = TableShallowCopy(a)
                newA[#newA+1] = j

                local newB = TableShallowCopy(b)
                newB[#newB+1] = i+j

                local newC = TableShallowCopy(c)
                newC[#newC+1] = i-j

                local moreSolutions = Queens(n, i+1, newA, newB, newC)
                for k=1, k<=#moreSolutions {
                    solutions[#solutions+1] = moreSolutions[k]
                }
            }
        }
    } else {
        solutions[#solutions+1] = TableShallowCopy(a)
    }

    return solutions
}

func TableShallowCopy(table) {
    local newTable = {}
    local keys = _keys(table)

    for i=1, i<=#keys {
        newTable[keys[i]] = table[keys[i]]
    }

    return newTable
}

func TableContains(t, v) {
    local keys = _keys(t)
    
    for i=1, i<=#keys {
        if t[keys[i]]==v {
            return true;
        }
    }

    return false
}

func PrintTable(table) {
    local keys = _keys(table)

    for i=1, i<=#keys {
        print(table[keys[i]] $ ", ")
    }

    println()
}